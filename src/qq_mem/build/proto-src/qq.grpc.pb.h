// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: qq.proto
#ifndef GRPC_qq_2eproto__INCLUDED
#define GRPC_qq_2eproto__INCLUDED

#include "qq.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace qq {

// The greeting service definition.
class QQEngine final {
 public:
  static constexpr char const* service_full_name() {
    return "qq.QQEngine";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Sends a greeting
    virtual ::grpc::Status SayHello(::grpc::ClientContext* context, const ::qq::HelloRequest& request, ::qq::HelloReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qq::HelloReply>> AsyncSayHello(::grpc::ClientContext* context, const ::qq::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qq::HelloReply>>(AsyncSayHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qq::HelloReply>> PrepareAsyncSayHello(::grpc::ClientContext* context, const ::qq::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qq::HelloReply>>(PrepareAsyncSayHelloRaw(context, request, cq));
    }
    virtual ::grpc::Status AddDocument(::grpc::ClientContext* context, const ::qq::AddDocumentRequest& request, ::qq::StatusReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qq::StatusReply>> AsyncAddDocument(::grpc::ClientContext* context, const ::qq::AddDocumentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qq::StatusReply>>(AsyncAddDocumentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qq::StatusReply>> PrepareAsyncAddDocument(::grpc::ClientContext* context, const ::qq::AddDocumentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qq::StatusReply>>(PrepareAsyncAddDocumentRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::qq::HelloReply>* AsyncSayHelloRaw(::grpc::ClientContext* context, const ::qq::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::qq::HelloReply>* PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::qq::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::qq::StatusReply>* AsyncAddDocumentRaw(::grpc::ClientContext* context, const ::qq::AddDocumentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::qq::StatusReply>* PrepareAsyncAddDocumentRaw(::grpc::ClientContext* context, const ::qq::AddDocumentRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SayHello(::grpc::ClientContext* context, const ::qq::HelloRequest& request, ::qq::HelloReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qq::HelloReply>> AsyncSayHello(::grpc::ClientContext* context, const ::qq::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qq::HelloReply>>(AsyncSayHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qq::HelloReply>> PrepareAsyncSayHello(::grpc::ClientContext* context, const ::qq::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qq::HelloReply>>(PrepareAsyncSayHelloRaw(context, request, cq));
    }
    ::grpc::Status AddDocument(::grpc::ClientContext* context, const ::qq::AddDocumentRequest& request, ::qq::StatusReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qq::StatusReply>> AsyncAddDocument(::grpc::ClientContext* context, const ::qq::AddDocumentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qq::StatusReply>>(AsyncAddDocumentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qq::StatusReply>> PrepareAsyncAddDocument(::grpc::ClientContext* context, const ::qq::AddDocumentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qq::StatusReply>>(PrepareAsyncAddDocumentRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::qq::HelloReply>* AsyncSayHelloRaw(::grpc::ClientContext* context, const ::qq::HelloRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::qq::HelloReply>* PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::qq::HelloRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::qq::StatusReply>* AsyncAddDocumentRaw(::grpc::ClientContext* context, const ::qq::AddDocumentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::qq::StatusReply>* PrepareAsyncAddDocumentRaw(::grpc::ClientContext* context, const ::qq::AddDocumentRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_SayHello_;
    const ::grpc::RpcMethod rpcmethod_AddDocument_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Sends a greeting
    virtual ::grpc::Status SayHello(::grpc::ServerContext* context, const ::qq::HelloRequest* request, ::qq::HelloReply* response);
    virtual ::grpc::Status AddDocument(::grpc::ServerContext* context, const ::qq::AddDocumentRequest* request, ::qq::StatusReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SayHello() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* context, const ::qq::HelloRequest* request, ::qq::HelloReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSayHello(::grpc::ServerContext* context, ::qq::HelloRequest* request, ::grpc::ServerAsyncResponseWriter< ::qq::HelloReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddDocument : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AddDocument() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_AddDocument() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddDocument(::grpc::ServerContext* context, const ::qq::AddDocumentRequest* request, ::qq::StatusReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddDocument(::grpc::ServerContext* context, ::qq::AddDocumentRequest* request, ::grpc::ServerAsyncResponseWriter< ::qq::StatusReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SayHello<WithAsyncMethod_AddDocument<Service > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SayHello() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* context, const ::qq::HelloRequest* request, ::qq::HelloReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddDocument : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AddDocument() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_AddDocument() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddDocument(::grpc::ServerContext* context, const ::qq::AddDocumentRequest* request, ::qq::StatusReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SayHello() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::qq::HelloRequest, ::qq::HelloReply>(std::bind(&WithStreamedUnaryMethod_SayHello<BaseClass>::StreamedSayHello, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* context, const ::qq::HelloRequest* request, ::qq::HelloReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSayHello(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::qq::HelloRequest,::qq::HelloReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddDocument : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_AddDocument() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::StreamedUnaryHandler< ::qq::AddDocumentRequest, ::qq::StatusReply>(std::bind(&WithStreamedUnaryMethod_AddDocument<BaseClass>::StreamedAddDocument, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AddDocument() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddDocument(::grpc::ServerContext* context, const ::qq::AddDocumentRequest* request, ::qq::StatusReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddDocument(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::qq::AddDocumentRequest,::qq::StatusReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SayHello<WithStreamedUnaryMethod_AddDocument<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SayHello<WithStreamedUnaryMethod_AddDocument<Service > > StreamedService;
};

}  // namespace qq


#endif  // GRPC_qq_2eproto__INCLUDED
