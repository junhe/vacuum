// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: qq.proto

#ifndef PROTOBUF_qq_2eproto__INCLUDED
#define PROTOBUF_qq_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace qq {
class AddDocumentRequest;
class AddDocumentRequestDefaultTypeInternal;
extern AddDocumentRequestDefaultTypeInternal _AddDocumentRequest_default_instance_;
class AddDocumentRequest_Document;
class AddDocumentRequest_DocumentDefaultTypeInternal;
extern AddDocumentRequest_DocumentDefaultTypeInternal _AddDocumentRequest_Document_default_instance_;
class AddDocumentRequest_Options;
class AddDocumentRequest_OptionsDefaultTypeInternal;
extern AddDocumentRequest_OptionsDefaultTypeInternal _AddDocumentRequest_Options_default_instance_;
class HelloReply;
class HelloReplyDefaultTypeInternal;
extern HelloReplyDefaultTypeInternal _HelloReply_default_instance_;
class HelloRequest;
class HelloRequestDefaultTypeInternal;
extern HelloRequestDefaultTypeInternal _HelloRequest_default_instance_;
class SearchReply;
class SearchReplyDefaultTypeInternal;
extern SearchReplyDefaultTypeInternal _SearchReply_default_instance_;
class SearchRequest;
class SearchRequestDefaultTypeInternal;
extern SearchRequestDefaultTypeInternal _SearchRequest_default_instance_;
class StatusReply;
class StatusReplyDefaultTypeInternal;
extern StatusReplyDefaultTypeInternal _StatusReply_default_instance_;
}  // namespace qq

namespace qq {

namespace protobuf_qq_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_qq_2eproto

// ===================================================================

class AddDocumentRequest_Document : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:qq.AddDocumentRequest.Document) */ {
 public:
  AddDocumentRequest_Document();
  virtual ~AddDocumentRequest_Document();

  AddDocumentRequest_Document(const AddDocumentRequest_Document& from);

  inline AddDocumentRequest_Document& operator=(const AddDocumentRequest_Document& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddDocumentRequest_Document(AddDocumentRequest_Document&& from) noexcept
    : AddDocumentRequest_Document() {
    *this = ::std::move(from);
  }

  inline AddDocumentRequest_Document& operator=(AddDocumentRequest_Document&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddDocumentRequest_Document& default_instance();

  static inline const AddDocumentRequest_Document* internal_default_instance() {
    return reinterpret_cast<const AddDocumentRequest_Document*>(
               &_AddDocumentRequest_Document_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(AddDocumentRequest_Document* other);
  friend void swap(AddDocumentRequest_Document& a, AddDocumentRequest_Document& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddDocumentRequest_Document* New() const PROTOBUF_FINAL { return New(NULL); }

  AddDocumentRequest_Document* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddDocumentRequest_Document& from);
  void MergeFrom(const AddDocumentRequest_Document& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddDocumentRequest_Document* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string title = 1;
  void clear_title();
  static const int kTitleFieldNumber = 1;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // string url = 2;
  void clear_url();
  static const int kUrlFieldNumber = 2;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // string body = 3;
  void clear_body();
  static const int kBodyFieldNumber = 3;
  const ::std::string& body() const;
  void set_body(const ::std::string& value);
  #if LANG_CXX11
  void set_body(::std::string&& value);
  #endif
  void set_body(const char* value);
  void set_body(const char* value, size_t size);
  ::std::string* mutable_body();
  ::std::string* release_body();
  void set_allocated_body(::std::string* body);

  // string tokens = 4;
  void clear_tokens();
  static const int kTokensFieldNumber = 4;
  const ::std::string& tokens() const;
  void set_tokens(const ::std::string& value);
  #if LANG_CXX11
  void set_tokens(::std::string&& value);
  #endif
  void set_tokens(const char* value);
  void set_tokens(const char* value, size_t size);
  ::std::string* mutable_tokens();
  ::std::string* release_tokens();
  void set_allocated_tokens(::std::string* tokens);

  // string offsets = 5;
  void clear_offsets();
  static const int kOffsetsFieldNumber = 5;
  const ::std::string& offsets() const;
  void set_offsets(const ::std::string& value);
  #if LANG_CXX11
  void set_offsets(::std::string&& value);
  #endif
  void set_offsets(const char* value);
  void set_offsets(const char* value, size_t size);
  ::std::string* mutable_offsets();
  ::std::string* release_offsets();
  void set_allocated_offsets(::std::string* offsets);

  // @@protoc_insertion_point(class_scope:qq.AddDocumentRequest.Document)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr body_;
  ::google::protobuf::internal::ArenaStringPtr tokens_;
  ::google::protobuf::internal::ArenaStringPtr offsets_;
  mutable int _cached_size_;
  friend struct protobuf_qq_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddDocumentRequest_Options : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:qq.AddDocumentRequest.Options) */ {
 public:
  AddDocumentRequest_Options();
  virtual ~AddDocumentRequest_Options();

  AddDocumentRequest_Options(const AddDocumentRequest_Options& from);

  inline AddDocumentRequest_Options& operator=(const AddDocumentRequest_Options& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddDocumentRequest_Options(AddDocumentRequest_Options&& from) noexcept
    : AddDocumentRequest_Options() {
    *this = ::std::move(from);
  }

  inline AddDocumentRequest_Options& operator=(AddDocumentRequest_Options&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddDocumentRequest_Options& default_instance();

  static inline const AddDocumentRequest_Options* internal_default_instance() {
    return reinterpret_cast<const AddDocumentRequest_Options*>(
               &_AddDocumentRequest_Options_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(AddDocumentRequest_Options* other);
  friend void swap(AddDocumentRequest_Options& a, AddDocumentRequest_Options& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddDocumentRequest_Options* New() const PROTOBUF_FINAL { return New(NULL); }

  AddDocumentRequest_Options* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddDocumentRequest_Options& from);
  void MergeFrom(const AddDocumentRequest_Options& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddDocumentRequest_Options* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool save = 1;
  void clear_save();
  static const int kSaveFieldNumber = 1;
  bool save() const;
  void set_save(bool value);

  // @@protoc_insertion_point(class_scope:qq.AddDocumentRequest.Options)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool save_;
  mutable int _cached_size_;
  friend struct protobuf_qq_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddDocumentRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:qq.AddDocumentRequest) */ {
 public:
  AddDocumentRequest();
  virtual ~AddDocumentRequest();

  AddDocumentRequest(const AddDocumentRequest& from);

  inline AddDocumentRequest& operator=(const AddDocumentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddDocumentRequest(AddDocumentRequest&& from) noexcept
    : AddDocumentRequest() {
    *this = ::std::move(from);
  }

  inline AddDocumentRequest& operator=(AddDocumentRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddDocumentRequest& default_instance();

  static inline const AddDocumentRequest* internal_default_instance() {
    return reinterpret_cast<const AddDocumentRequest*>(
               &_AddDocumentRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(AddDocumentRequest* other);
  friend void swap(AddDocumentRequest& a, AddDocumentRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddDocumentRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  AddDocumentRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddDocumentRequest& from);
  void MergeFrom(const AddDocumentRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddDocumentRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef AddDocumentRequest_Document Document;
  typedef AddDocumentRequest_Options Options;

  // accessors -------------------------------------------------------

  // .qq.AddDocumentRequest.Document document = 1;
  bool has_document() const;
  void clear_document();
  static const int kDocumentFieldNumber = 1;
  const ::qq::AddDocumentRequest_Document& document() const;
  ::qq::AddDocumentRequest_Document* mutable_document();
  ::qq::AddDocumentRequest_Document* release_document();
  void set_allocated_document(::qq::AddDocumentRequest_Document* document);

  // .qq.AddDocumentRequest.Options options = 2;
  bool has_options() const;
  void clear_options();
  static const int kOptionsFieldNumber = 2;
  const ::qq::AddDocumentRequest_Options& options() const;
  ::qq::AddDocumentRequest_Options* mutable_options();
  ::qq::AddDocumentRequest_Options* release_options();
  void set_allocated_options(::qq::AddDocumentRequest_Options* options);

  // @@protoc_insertion_point(class_scope:qq.AddDocumentRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::qq::AddDocumentRequest_Document* document_;
  ::qq::AddDocumentRequest_Options* options_;
  mutable int _cached_size_;
  friend struct protobuf_qq_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StatusReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:qq.StatusReply) */ {
 public:
  StatusReply();
  virtual ~StatusReply();

  StatusReply(const StatusReply& from);

  inline StatusReply& operator=(const StatusReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StatusReply(StatusReply&& from) noexcept
    : StatusReply() {
    *this = ::std::move(from);
  }

  inline StatusReply& operator=(StatusReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StatusReply& default_instance();

  static inline const StatusReply* internal_default_instance() {
    return reinterpret_cast<const StatusReply*>(
               &_StatusReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(StatusReply* other);
  friend void swap(StatusReply& a, StatusReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StatusReply* New() const PROTOBUF_FINAL { return New(NULL); }

  StatusReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StatusReply& from);
  void MergeFrom(const StatusReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StatusReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // bool ok = 1;
  void clear_ok();
  static const int kOkFieldNumber = 1;
  bool ok() const;
  void set_ok(bool value);

  // @@protoc_insertion_point(class_scope:qq.StatusReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  bool ok_;
  mutable int _cached_size_;
  friend struct protobuf_qq_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SearchRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:qq.SearchRequest) */ {
 public:
  SearchRequest();
  virtual ~SearchRequest();

  SearchRequest(const SearchRequest& from);

  inline SearchRequest& operator=(const SearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SearchRequest(SearchRequest&& from) noexcept
    : SearchRequest() {
    *this = ::std::move(from);
  }

  inline SearchRequest& operator=(SearchRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchRequest& default_instance();

  static inline const SearchRequest* internal_default_instance() {
    return reinterpret_cast<const SearchRequest*>(
               &_SearchRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(SearchRequest* other);
  friend void swap(SearchRequest& a, SearchRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SearchRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SearchRequest& from);
  void MergeFrom(const SearchRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SearchRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string term = 1;
  void clear_term();
  static const int kTermFieldNumber = 1;
  const ::std::string& term() const;
  void set_term(const ::std::string& value);
  #if LANG_CXX11
  void set_term(::std::string&& value);
  #endif
  void set_term(const char* value);
  void set_term(const char* value, size_t size);
  ::std::string* mutable_term();
  ::std::string* release_term();
  void set_allocated_term(::std::string* term);

  // @@protoc_insertion_point(class_scope:qq.SearchRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr term_;
  mutable int _cached_size_;
  friend struct protobuf_qq_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SearchReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:qq.SearchReply) */ {
 public:
  SearchReply();
  virtual ~SearchReply();

  SearchReply(const SearchReply& from);

  inline SearchReply& operator=(const SearchReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SearchReply(SearchReply&& from) noexcept
    : SearchReply() {
    *this = ::std::move(from);
  }

  inline SearchReply& operator=(SearchReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchReply& default_instance();

  static inline const SearchReply* internal_default_instance() {
    return reinterpret_cast<const SearchReply*>(
               &_SearchReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(SearchReply* other);
  friend void swap(SearchReply& a, SearchReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SearchReply* New() const PROTOBUF_FINAL { return New(NULL); }

  SearchReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SearchReply& from);
  void MergeFrom(const SearchReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SearchReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 doc_ids = 1;
  int doc_ids_size() const;
  void clear_doc_ids();
  static const int kDocIdsFieldNumber = 1;
  ::google::protobuf::int32 doc_ids(int index) const;
  void set_doc_ids(int index, ::google::protobuf::int32 value);
  void add_doc_ids(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      doc_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_doc_ids();

  // @@protoc_insertion_point(class_scope:qq.SearchReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > doc_ids_;
  mutable int _doc_ids_cached_byte_size_;
  mutable int _cached_size_;
  friend struct protobuf_qq_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HelloRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:qq.HelloRequest) */ {
 public:
  HelloRequest();
  virtual ~HelloRequest();

  HelloRequest(const HelloRequest& from);

  inline HelloRequest& operator=(const HelloRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HelloRequest(HelloRequest&& from) noexcept
    : HelloRequest() {
    *this = ::std::move(from);
  }

  inline HelloRequest& operator=(HelloRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HelloRequest& default_instance();

  static inline const HelloRequest* internal_default_instance() {
    return reinterpret_cast<const HelloRequest*>(
               &_HelloRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(HelloRequest* other);
  friend void swap(HelloRequest& a, HelloRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HelloRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  HelloRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HelloRequest& from);
  void MergeFrom(const HelloRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HelloRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:qq.HelloRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct protobuf_qq_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HelloReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:qq.HelloReply) */ {
 public:
  HelloReply();
  virtual ~HelloReply();

  HelloReply(const HelloReply& from);

  inline HelloReply& operator=(const HelloReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HelloReply(HelloReply&& from) noexcept
    : HelloReply() {
    *this = ::std::move(from);
  }

  inline HelloReply& operator=(HelloReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HelloReply& default_instance();

  static inline const HelloReply* internal_default_instance() {
    return reinterpret_cast<const HelloReply*>(
               &_HelloReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(HelloReply* other);
  friend void swap(HelloReply& a, HelloReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HelloReply* New() const PROTOBUF_FINAL { return New(NULL); }

  HelloReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HelloReply& from);
  void MergeFrom(const HelloReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HelloReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:qq.HelloReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  mutable int _cached_size_;
  friend struct protobuf_qq_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AddDocumentRequest_Document

// string title = 1;
inline void AddDocumentRequest_Document::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddDocumentRequest_Document::title() const {
  // @@protoc_insertion_point(field_get:qq.AddDocumentRequest.Document.title)
  return title_.GetNoArena();
}
inline void AddDocumentRequest_Document::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qq.AddDocumentRequest.Document.title)
}
#if LANG_CXX11
inline void AddDocumentRequest_Document::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qq.AddDocumentRequest.Document.title)
}
#endif
inline void AddDocumentRequest_Document::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qq.AddDocumentRequest.Document.title)
}
inline void AddDocumentRequest_Document::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qq.AddDocumentRequest.Document.title)
}
inline ::std::string* AddDocumentRequest_Document::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:qq.AddDocumentRequest.Document.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddDocumentRequest_Document::release_title() {
  // @@protoc_insertion_point(field_release:qq.AddDocumentRequest.Document.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddDocumentRequest_Document::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:qq.AddDocumentRequest.Document.title)
}

// string url = 2;
inline void AddDocumentRequest_Document::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddDocumentRequest_Document::url() const {
  // @@protoc_insertion_point(field_get:qq.AddDocumentRequest.Document.url)
  return url_.GetNoArena();
}
inline void AddDocumentRequest_Document::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qq.AddDocumentRequest.Document.url)
}
#if LANG_CXX11
inline void AddDocumentRequest_Document::set_url(::std::string&& value) {
  
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qq.AddDocumentRequest.Document.url)
}
#endif
inline void AddDocumentRequest_Document::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qq.AddDocumentRequest.Document.url)
}
inline void AddDocumentRequest_Document::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qq.AddDocumentRequest.Document.url)
}
inline ::std::string* AddDocumentRequest_Document::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:qq.AddDocumentRequest.Document.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddDocumentRequest_Document::release_url() {
  // @@protoc_insertion_point(field_release:qq.AddDocumentRequest.Document.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddDocumentRequest_Document::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:qq.AddDocumentRequest.Document.url)
}

// string body = 3;
inline void AddDocumentRequest_Document::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddDocumentRequest_Document::body() const {
  // @@protoc_insertion_point(field_get:qq.AddDocumentRequest.Document.body)
  return body_.GetNoArena();
}
inline void AddDocumentRequest_Document::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qq.AddDocumentRequest.Document.body)
}
#if LANG_CXX11
inline void AddDocumentRequest_Document::set_body(::std::string&& value) {
  
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qq.AddDocumentRequest.Document.body)
}
#endif
inline void AddDocumentRequest_Document::set_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qq.AddDocumentRequest.Document.body)
}
inline void AddDocumentRequest_Document::set_body(const char* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qq.AddDocumentRequest.Document.body)
}
inline ::std::string* AddDocumentRequest_Document::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:qq.AddDocumentRequest.Document.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddDocumentRequest_Document::release_body() {
  // @@protoc_insertion_point(field_release:qq.AddDocumentRequest.Document.body)
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddDocumentRequest_Document::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:qq.AddDocumentRequest.Document.body)
}

// string tokens = 4;
inline void AddDocumentRequest_Document::clear_tokens() {
  tokens_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddDocumentRequest_Document::tokens() const {
  // @@protoc_insertion_point(field_get:qq.AddDocumentRequest.Document.tokens)
  return tokens_.GetNoArena();
}
inline void AddDocumentRequest_Document::set_tokens(const ::std::string& value) {
  
  tokens_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qq.AddDocumentRequest.Document.tokens)
}
#if LANG_CXX11
inline void AddDocumentRequest_Document::set_tokens(::std::string&& value) {
  
  tokens_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qq.AddDocumentRequest.Document.tokens)
}
#endif
inline void AddDocumentRequest_Document::set_tokens(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tokens_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qq.AddDocumentRequest.Document.tokens)
}
inline void AddDocumentRequest_Document::set_tokens(const char* value, size_t size) {
  
  tokens_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qq.AddDocumentRequest.Document.tokens)
}
inline ::std::string* AddDocumentRequest_Document::mutable_tokens() {
  
  // @@protoc_insertion_point(field_mutable:qq.AddDocumentRequest.Document.tokens)
  return tokens_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddDocumentRequest_Document::release_tokens() {
  // @@protoc_insertion_point(field_release:qq.AddDocumentRequest.Document.tokens)
  
  return tokens_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddDocumentRequest_Document::set_allocated_tokens(::std::string* tokens) {
  if (tokens != NULL) {
    
  } else {
    
  }
  tokens_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tokens);
  // @@protoc_insertion_point(field_set_allocated:qq.AddDocumentRequest.Document.tokens)
}

// string offsets = 5;
inline void AddDocumentRequest_Document::clear_offsets() {
  offsets_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddDocumentRequest_Document::offsets() const {
  // @@protoc_insertion_point(field_get:qq.AddDocumentRequest.Document.offsets)
  return offsets_.GetNoArena();
}
inline void AddDocumentRequest_Document::set_offsets(const ::std::string& value) {
  
  offsets_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qq.AddDocumentRequest.Document.offsets)
}
#if LANG_CXX11
inline void AddDocumentRequest_Document::set_offsets(::std::string&& value) {
  
  offsets_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qq.AddDocumentRequest.Document.offsets)
}
#endif
inline void AddDocumentRequest_Document::set_offsets(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  offsets_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qq.AddDocumentRequest.Document.offsets)
}
inline void AddDocumentRequest_Document::set_offsets(const char* value, size_t size) {
  
  offsets_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qq.AddDocumentRequest.Document.offsets)
}
inline ::std::string* AddDocumentRequest_Document::mutable_offsets() {
  
  // @@protoc_insertion_point(field_mutable:qq.AddDocumentRequest.Document.offsets)
  return offsets_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddDocumentRequest_Document::release_offsets() {
  // @@protoc_insertion_point(field_release:qq.AddDocumentRequest.Document.offsets)
  
  return offsets_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddDocumentRequest_Document::set_allocated_offsets(::std::string* offsets) {
  if (offsets != NULL) {
    
  } else {
    
  }
  offsets_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), offsets);
  // @@protoc_insertion_point(field_set_allocated:qq.AddDocumentRequest.Document.offsets)
}

// -------------------------------------------------------------------

// AddDocumentRequest_Options

// bool save = 1;
inline void AddDocumentRequest_Options::clear_save() {
  save_ = false;
}
inline bool AddDocumentRequest_Options::save() const {
  // @@protoc_insertion_point(field_get:qq.AddDocumentRequest.Options.save)
  return save_;
}
inline void AddDocumentRequest_Options::set_save(bool value) {
  
  save_ = value;
  // @@protoc_insertion_point(field_set:qq.AddDocumentRequest.Options.save)
}

// -------------------------------------------------------------------

// AddDocumentRequest

// .qq.AddDocumentRequest.Document document = 1;
inline bool AddDocumentRequest::has_document() const {
  return this != internal_default_instance() && document_ != NULL;
}
inline void AddDocumentRequest::clear_document() {
  if (GetArenaNoVirtual() == NULL && document_ != NULL) delete document_;
  document_ = NULL;
}
inline const ::qq::AddDocumentRequest_Document& AddDocumentRequest::document() const {
  const ::qq::AddDocumentRequest_Document* p = document_;
  // @@protoc_insertion_point(field_get:qq.AddDocumentRequest.document)
  return p != NULL ? *p : *reinterpret_cast<const ::qq::AddDocumentRequest_Document*>(
      &::qq::_AddDocumentRequest_Document_default_instance_);
}
inline ::qq::AddDocumentRequest_Document* AddDocumentRequest::mutable_document() {
  
  if (document_ == NULL) {
    document_ = new ::qq::AddDocumentRequest_Document;
  }
  // @@protoc_insertion_point(field_mutable:qq.AddDocumentRequest.document)
  return document_;
}
inline ::qq::AddDocumentRequest_Document* AddDocumentRequest::release_document() {
  // @@protoc_insertion_point(field_release:qq.AddDocumentRequest.document)
  
  ::qq::AddDocumentRequest_Document* temp = document_;
  document_ = NULL;
  return temp;
}
inline void AddDocumentRequest::set_allocated_document(::qq::AddDocumentRequest_Document* document) {
  delete document_;
  document_ = document;
  if (document) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:qq.AddDocumentRequest.document)
}

// .qq.AddDocumentRequest.Options options = 2;
inline bool AddDocumentRequest::has_options() const {
  return this != internal_default_instance() && options_ != NULL;
}
inline void AddDocumentRequest::clear_options() {
  if (GetArenaNoVirtual() == NULL && options_ != NULL) delete options_;
  options_ = NULL;
}
inline const ::qq::AddDocumentRequest_Options& AddDocumentRequest::options() const {
  const ::qq::AddDocumentRequest_Options* p = options_;
  // @@protoc_insertion_point(field_get:qq.AddDocumentRequest.options)
  return p != NULL ? *p : *reinterpret_cast<const ::qq::AddDocumentRequest_Options*>(
      &::qq::_AddDocumentRequest_Options_default_instance_);
}
inline ::qq::AddDocumentRequest_Options* AddDocumentRequest::mutable_options() {
  
  if (options_ == NULL) {
    options_ = new ::qq::AddDocumentRequest_Options;
  }
  // @@protoc_insertion_point(field_mutable:qq.AddDocumentRequest.options)
  return options_;
}
inline ::qq::AddDocumentRequest_Options* AddDocumentRequest::release_options() {
  // @@protoc_insertion_point(field_release:qq.AddDocumentRequest.options)
  
  ::qq::AddDocumentRequest_Options* temp = options_;
  options_ = NULL;
  return temp;
}
inline void AddDocumentRequest::set_allocated_options(::qq::AddDocumentRequest_Options* options) {
  delete options_;
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:qq.AddDocumentRequest.options)
}

// -------------------------------------------------------------------

// StatusReply

// bool ok = 1;
inline void StatusReply::clear_ok() {
  ok_ = false;
}
inline bool StatusReply::ok() const {
  // @@protoc_insertion_point(field_get:qq.StatusReply.ok)
  return ok_;
}
inline void StatusReply::set_ok(bool value) {
  
  ok_ = value;
  // @@protoc_insertion_point(field_set:qq.StatusReply.ok)
}

// string message = 2;
inline void StatusReply::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StatusReply::message() const {
  // @@protoc_insertion_point(field_get:qq.StatusReply.message)
  return message_.GetNoArena();
}
inline void StatusReply::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qq.StatusReply.message)
}
#if LANG_CXX11
inline void StatusReply::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qq.StatusReply.message)
}
#endif
inline void StatusReply::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qq.StatusReply.message)
}
inline void StatusReply::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qq.StatusReply.message)
}
inline ::std::string* StatusReply::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:qq.StatusReply.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StatusReply::release_message() {
  // @@protoc_insertion_point(field_release:qq.StatusReply.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StatusReply::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:qq.StatusReply.message)
}

// -------------------------------------------------------------------

// SearchRequest

// string term = 1;
inline void SearchRequest::clear_term() {
  term_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SearchRequest::term() const {
  // @@protoc_insertion_point(field_get:qq.SearchRequest.term)
  return term_.GetNoArena();
}
inline void SearchRequest::set_term(const ::std::string& value) {
  
  term_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qq.SearchRequest.term)
}
#if LANG_CXX11
inline void SearchRequest::set_term(::std::string&& value) {
  
  term_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qq.SearchRequest.term)
}
#endif
inline void SearchRequest::set_term(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  term_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qq.SearchRequest.term)
}
inline void SearchRequest::set_term(const char* value, size_t size) {
  
  term_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qq.SearchRequest.term)
}
inline ::std::string* SearchRequest::mutable_term() {
  
  // @@protoc_insertion_point(field_mutable:qq.SearchRequest.term)
  return term_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SearchRequest::release_term() {
  // @@protoc_insertion_point(field_release:qq.SearchRequest.term)
  
  return term_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SearchRequest::set_allocated_term(::std::string* term) {
  if (term != NULL) {
    
  } else {
    
  }
  term_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), term);
  // @@protoc_insertion_point(field_set_allocated:qq.SearchRequest.term)
}

// -------------------------------------------------------------------

// SearchReply

// repeated int32 doc_ids = 1;
inline int SearchReply::doc_ids_size() const {
  return doc_ids_.size();
}
inline void SearchReply::clear_doc_ids() {
  doc_ids_.Clear();
}
inline ::google::protobuf::int32 SearchReply::doc_ids(int index) const {
  // @@protoc_insertion_point(field_get:qq.SearchReply.doc_ids)
  return doc_ids_.Get(index);
}
inline void SearchReply::set_doc_ids(int index, ::google::protobuf::int32 value) {
  doc_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:qq.SearchReply.doc_ids)
}
inline void SearchReply::add_doc_ids(::google::protobuf::int32 value) {
  doc_ids_.Add(value);
  // @@protoc_insertion_point(field_add:qq.SearchReply.doc_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SearchReply::doc_ids() const {
  // @@protoc_insertion_point(field_list:qq.SearchReply.doc_ids)
  return doc_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SearchReply::mutable_doc_ids() {
  // @@protoc_insertion_point(field_mutable_list:qq.SearchReply.doc_ids)
  return &doc_ids_;
}

// -------------------------------------------------------------------

// HelloRequest

// string name = 1;
inline void HelloRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HelloRequest::name() const {
  // @@protoc_insertion_point(field_get:qq.HelloRequest.name)
  return name_.GetNoArena();
}
inline void HelloRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qq.HelloRequest.name)
}
#if LANG_CXX11
inline void HelloRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qq.HelloRequest.name)
}
#endif
inline void HelloRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qq.HelloRequest.name)
}
inline void HelloRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qq.HelloRequest.name)
}
inline ::std::string* HelloRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:qq.HelloRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HelloRequest::release_name() {
  // @@protoc_insertion_point(field_release:qq.HelloRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HelloRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:qq.HelloRequest.name)
}

// -------------------------------------------------------------------

// HelloReply

// string message = 1;
inline void HelloReply::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HelloReply::message() const {
  // @@protoc_insertion_point(field_get:qq.HelloReply.message)
  return message_.GetNoArena();
}
inline void HelloReply::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qq.HelloReply.message)
}
#if LANG_CXX11
inline void HelloReply::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:qq.HelloReply.message)
}
#endif
inline void HelloReply::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qq.HelloReply.message)
}
inline void HelloReply::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qq.HelloReply.message)
}
inline ::std::string* HelloReply::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:qq.HelloReply.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HelloReply::release_message() {
  // @@protoc_insertion_point(field_release:qq.HelloReply.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HelloReply::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:qq.HelloReply.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace qq

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_qq_2eproto__INCLUDED
