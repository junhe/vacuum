// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: qq.proto

#include "qq.pb.h"
#include "qq.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace qq {

static const char* QQEngine_method_names[] = {
  "/qq.QQEngine/SayHello",
  "/qq.QQEngine/AddDocument",
};

std::unique_ptr< QQEngine::Stub> QQEngine::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< QQEngine::Stub> stub(new QQEngine::Stub(channel));
  return stub;
}

QQEngine::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SayHello_(QQEngine_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddDocument_(QQEngine_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status QQEngine::Stub::SayHello(::grpc::ClientContext* context, const ::qq::HelloRequest& request, ::qq::HelloReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SayHello_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::qq::HelloReply>* QQEngine::Stub::AsyncSayHelloRaw(::grpc::ClientContext* context, const ::qq::HelloRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::qq::HelloReply>::Create(channel_.get(), cq, rpcmethod_SayHello_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::qq::HelloReply>* QQEngine::Stub::PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::qq::HelloRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::qq::HelloReply>::Create(channel_.get(), cq, rpcmethod_SayHello_, context, request, false);
}

::grpc::Status QQEngine::Stub::AddDocument(::grpc::ClientContext* context, const ::qq::AddDocumentRequest& request, ::qq::StatusReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_AddDocument_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::qq::StatusReply>* QQEngine::Stub::AsyncAddDocumentRaw(::grpc::ClientContext* context, const ::qq::AddDocumentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::qq::StatusReply>::Create(channel_.get(), cq, rpcmethod_AddDocument_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::qq::StatusReply>* QQEngine::Stub::PrepareAsyncAddDocumentRaw(::grpc::ClientContext* context, const ::qq::AddDocumentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::qq::StatusReply>::Create(channel_.get(), cq, rpcmethod_AddDocument_, context, request, false);
}

QQEngine::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      QQEngine_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< QQEngine::Service, ::qq::HelloRequest, ::qq::HelloReply>(
          std::mem_fn(&QQEngine::Service::SayHello), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      QQEngine_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< QQEngine::Service, ::qq::AddDocumentRequest, ::qq::StatusReply>(
          std::mem_fn(&QQEngine::Service::AddDocument), this)));
}

QQEngine::Service::~Service() {
}

::grpc::Status QQEngine::Service::SayHello(::grpc::ServerContext* context, const ::qq::HelloRequest* request, ::qq::HelloReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status QQEngine::Service::AddDocument(::grpc::ServerContext* context, const ::qq::AddDocumentRequest* request, ::qq::StatusReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace qq

